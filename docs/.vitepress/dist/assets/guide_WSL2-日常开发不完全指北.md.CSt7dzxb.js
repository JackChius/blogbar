import{_ as n,c as l,a3 as t,j as s,a as e,o as i}from"./chunks/framework.BISkuWHZ.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/WSL2-日常开发不完全指北.md","filePath":"guide/WSL2-日常开发不完全指北.md"}'),o={name:"guide/WSL2-日常开发不完全指北.md"};function p(r,a,c,d,h,u){return i(),l("div",null,a[0]||(a[0]=[t(`<p>接触wsl2开发也有一段时间了，总结一个字就是真的香。</p><p>目前chuler所有的前后端，数据库，app开发等等几乎所有的环境都部署在了wsl2上，总体上好处多于缺点，当然其中还是存在，一些与原生linux的不同，需要时间去磨合。</p><h3 id="win10系统中wsl2开启systemctl命令" tabindex="-1">win10系统中wsl2开启systemctl命令 <a class="header-anchor" href="#win10系统中wsl2开启systemctl命令" aria-label="Permalink to &quot;win10系统中wsl2开启systemctl命令&quot;">​</a></h3><blockquote><p>刚开始用wsl2的时候，会发现ubuntu上常用的systemctl消失了，默认情况下在wsl2中使用systemctl命令会报错</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ sudo systemctl status cron.service</span></span>
<span class="line"><span>**System has not been booted with systemd as init system (PID 1). Can&#39;t operate.</span></span>
<span class="line"><span>Failed to connect to bus: Host is down**</span></span></code></pre></div><p><strong>解决办法:</strong></p><ol><li><p>安装daemonize</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install daemonize</span></span></code></pre></div></li><li><p>执行以下两句命令开启</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span></span>
<span class="line"><span></span></span>
<span class="line"><span>exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME</span></span></code></pre></div></li></ol><h3 id="与vmware的兼容问题" tabindex="-1">与VMWare的兼容问题 <a class="header-anchor" href="#与vmware的兼容问题" aria-label="Permalink to &quot;与VMWare的兼容问题&quot;">​</a></h3><blockquote><p>之前在win10上进行linux开发常用的就是vm虚拟机，切换到wsl后问题也来了，wsl2 和 VMWare 并不能和谐共存。。（更新：新版vm能与wsl2共存，但是涉及部分io操作性能会下降厉害）</p></blockquote><p>查阅微软官方文档得知，打开 <strong>wsl2</strong> 需要执行命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span></span></code></pre></div><p>由此命令推出，如果要在只用 vm 的环境，那么只能临时禁用wsl2了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Disable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span></span></code></pre></div><p>重启之后，Vmware完美启动。</p><p>与此同时，<strong>wsl2</strong> 就会下线了，想用只能再次切回去。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span></span>
<span class="line"><span>wsl --set-default-version 2</span></span></code></pre></div><h3 id="wsl2通过clash-for-windows使用windows代理-linux系统设置-一次生效" tabindex="-1"><strong>WSL2通过Clash for Windows使用Windows代理(Linux系统设置/一次生效)</strong> <a class="header-anchor" href="#wsl2通过clash-for-windows使用windows代理-linux系统设置-一次生效" aria-label="Permalink to &quot;**WSL2通过Clash for Windows使用Windows代理(Linux系统设置/一次生效)**&quot;">​</a></h3><blockquote><p>在需要用到代理网络，连接隧道网络等场景下，修改系统proxy配置，让代理穿透到wsl中。</p></blockquote><p>export hostip=$(cat /etc/resolv.conf |grep -oP &#39;(?&lt;=nameserver\\ ).*&#39;)</p>`,19),s("p",null,[e('export https_proxy="'),s("a",{href:"http://$",hostip:"",target:"_blank",rel:"noreferrer"},"http://$"),e(':7890"')],-1),s("p",null,[e('export http_proxy="'),s("a",{href:"http://$",hostip:"",target:"_blank",rel:"noreferrer"},"http://$"),e(':7890"')],-1),t('<h3 id="设置wsl2内端口映射-让局域网可访问wsl2内程序" tabindex="-1"><strong>设置wsl2内端口映射，让局域网可访问wsl2内程序</strong> <a class="header-anchor" href="#设置wsl2内端口映射-让局域网可访问wsl2内程序" aria-label="Permalink to &quot;**设置wsl2内端口映射，让局域网可访问wsl2内程序**&quot;">​</a></h3><blockquote><p>由于wsl2每次启动均是不同的虚拟IP,在调试、运行一些特殊应用的时候，开启端口转发能让wsl2内app与外界（宿主机）沟通并传输数据。</p></blockquote><ol><li><p>管理员权限运行powershell</p></li><li><p>netsh interface portproxy add v4tov4 listenport=* listenaddress=0.0.0.0 connectport=* connectaddress=* protocol=tcp</p><p>*代表所有端口，connectaddress=*为wsl内网地址</p></li><li><p>netsh interface portproxy show all 查看端口转发状态</p></li><li><p>关闭防火墙或者设置入站转发规则</p></li><li><p>删除端口转发：netsh interface portproxy delete v4tov4 listenport=* listenaddress=0.0.0.0</p><ul><li>代表所有端口，0.0.0.0为所有ip</li></ul></li></ol>',3)]))}const g=n(o,[["render",p]]);export{m as __pageData,g as default};
