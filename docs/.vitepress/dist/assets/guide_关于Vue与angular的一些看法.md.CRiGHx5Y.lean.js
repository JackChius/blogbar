import{_ as r,c as n,j as e,o as u}from"./chunks/framework.BISkuWHZ.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/关于Vue与angular的一些看法.md","filePath":"guide/关于Vue与angular的一些看法.md"}'),t={name:"guide/关于Vue与angular的一些看法.md"};function l(o,a,s,_,p,g){return u(),n("div",null,a[0]||(a[0]=[e("p",null,"​ 关于Vue和Angular，网上已经有大量的文章和社区讨论了他们彼此间的优劣，经过一段时间对Vue和Angular实际项目的一些接触后，在这里也谈谈个人的一些看法。",-1),e("p",null,"​ 其实这两个框架的选择或许没有一些前端开发者口中那般纠结和疑惑，Vue本身轻巧，第三方组件松散管理的态度已经阐明了他一定程度上是为快速开发而生，然而这可能在某些时候开发方式造成不统一的现象，在一些团队合作的项目中，Vue的某些功能会因为开发者使用不同的开发组件，打包方式等等产生不必要的麻烦。",-1),e("p",null,"​ Angualr在这点可能会更好，Angular崇尚的是ALL IN ONE的开发思想，简单说就是大而全，Angular其官方提供整套全家桶解决大部分的前端开发场景，而不用去将心思花在选择某些第三方开发组件上。包括项目的初期构建到后期的打包发布，单元测试，谷歌都为Angular提供了贴心的开发工具，这点上Angular显示出了一个优秀框架所具有的特性。而所带来的不足应该就是其学习曲线了吧，不仅要了解诸如依赖注入等新特性，语法层面也要学习TypeScript这门微软跟谷歌“打磨”的JS超集，在初期学习可能会遇到一些阻力。写到这里相信也差不多能对这两者进行比较明确的选择了，接下来撸起袖子开干才是正经事。",-1)]))}const c=r(t,[["render",l]]);export{i as __pageData,c as default};
