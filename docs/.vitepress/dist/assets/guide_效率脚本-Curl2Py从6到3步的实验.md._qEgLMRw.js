import{_ as i,c as a,a3 as n,o as t}from"./chunks/framework.BISkuWHZ.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/效率脚本-Curl2Py从6到3步的实验.md","filePath":"guide/效率脚本-Curl2Py从6到3步的实验.md"}'),l={name:"guide/效率脚本-Curl2Py从6到3步的实验.md"};function p(h,s,e,k,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<p>写给自己在爬虫项目里面的一个快捷转换脚本</p><p>前段时间开始写爬虫的时候，不少朋友推荐了下面的传送门</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**https://curl.trillworks.com/**</span></span></code></pre></div><p>什么样子先来瞅瞅看</p><p><img src="https://i.loli.net/2021/08/18/gKqALJ9Rytp6Dlk.png" alt="Untitled"></p><p>能够快速构造请求头，除了Postman，我最服气的就是它。</p><p><img src="https://i.loli.net/2021/08/18/C9HVw3ndWNMRFmE.png" alt="Untitled 1"></p><p>定位请求，右键复制curl，粘贴进入红框，绿框<strong>立刻</strong>自动生成py请求。</p><p>常年手动突然变自动，大幅提升效率，仿佛捡到宝贝。</p><h3 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h3><p>虽然但是，我还是觉得缺点什么。</p><p>不足在哪里？</p><p>从<strong>原生请求</strong>到生成<strong>python请求头</strong>，至少<strong>7</strong>步；</p><ul><li>复制 Curl</li><li>打开 浏览器</li><li>打开 <a href="https://curl.trillworks.com/" target="_blank" rel="noreferrer">https://curl.trillworks.com/</a></li><li>粘贴 Curl</li><li>复制 自动生成py请求</li><li>粘贴 至编辑器</li></ul><p>满打满算6步中间操作，偶尔用用还好，如果经常重复多遍，就不可忍耐了。</p><p>而且，<strong>过于依赖浏览器网页环境</strong>，在工作流不是一键好的事情，尤其是在一个国外的网站上。</p><h3 id="从6到3" tabindex="-1"><strong>从6到3</strong> <a class="header-anchor" href="#从6到3" aria-label="Permalink to &quot;**从6到3**&quot;">​</a></h3><p>理清需求，从根源着手。</p><p>冷静研究一番网站的结构，把它的转换网页js翻了一遍，好消息是他的主要逻辑放在前端，js代码大概9000行, 经过一番抛头去尾，过滤无效变量，提取核心逻辑方法，改造一番，写进编辑器→Js。</p><p>Ok，<strong>Curl2Js</strong> 由此诞生。</p><p>整套流程缩短至3步</p><ul><li>复制Curl</li><li>右键粘贴，运行 node curl.js -a &quot;Curl Text&quot;</li></ul><h3 id="转送python调用获取参数" tabindex="-1">转送Python调用获取参数 <a class="header-anchor" href="#转送python调用获取参数" aria-label="Permalink to &quot;转送Python调用获取参数&quot;">​</a></h3><p>因为原项目的环境以Python为主，所以后面也将脚本顺理成章的转成Python脚本，过程也不复杂，python读取Js文件，并且实现传参调用，Py调用Js的方法有不少，这里选用了execjs来运行这段代码。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#读取并编译js文件，运行js内函数获得想要的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSignatureString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsstr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReadJs()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> execjs.compile(jsstr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    curl_response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.dumps(ctx.call(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;convert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data) ) )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl_response</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#读取JS文件，将js代码转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsfile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./curl.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    codeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsfile.readline()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    codestr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codeline:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codestr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codestr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">codeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jsfile.readline()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codestr</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shell 获取参数并输出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Get Params=&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cook)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getSignatureString( cook )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Final Result=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result )</span></span></code></pre></div><h3 id="使用效果" tabindex="-1">使用效果 <a class="header-anchor" href="#使用效果" aria-label="Permalink to &quot;使用效果&quot;">​</a></h3><p><img src="https://i.loli.net/2021/08/18/894kYZ1mnGpbDfU.png" alt="Untitled 2"></p><h3 id="脚本地址" tabindex="-1">脚本地址 <a class="header-anchor" href="#脚本地址" aria-label="Permalink to &quot;脚本地址&quot;">​</a></h3><p>如果需要这个脚本的朋友，可以在点击博客右下角聊天窗口，回复curl脚本，我看到后会一一发送，也正好测试下，Hexo里面daovoice插件的交流效果，如果有更好的关于这个需求的扩展思路，也欢迎一起讨论。</p>`,29)]))}const g=i(l,[["render",p]]);export{o as __pageData,g as default};
